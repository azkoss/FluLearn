def gradleProperties = new Properties()
def gradlePropertiesFile = rootProject.file('gradle.properties')
if (gradlePropertiesFile.exists()) {
    gradlePropertiesFile.withReader('UTF-8') { reader ->
        gradleProperties.load(reader)
    }
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new Error("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion Integer.parseInt(gradleProperties.getProperty("compileSdkVersion"))
    buildToolsVersion gradleProperties.getProperty("buildToolsVersion")

    lintOptions {
        // 如果构建时发现了致命（Fatal）的问题，会中止构建（具体由 abortOnError 控制）
        checkReleaseBuilds false
        // 设置为 true，则当 Lint 发现错误时停止 Gradle 构建
        abortOnError false
        disable 'InvalidPackage'
    }

    defaultConfig {
        minSdkVersion Integer.parseInt(gradleProperties.getProperty("minSdkVersion"))
        targetSdkVersion Integer.parseInt(gradleProperties.getProperty("targetSdkVersion"))
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        ndk {
            //支持的CPU架构：armeabi、armeabi-v7a、arm64-v8a、x86、x86_64、mips、mips64
            //参阅 https://blog.csdn.net/u011733020/article/details/84107354
            if (Boolean.parseBoolean(gradleProperties.getProperty("supportX86Arch"))) {
                abiFilters 'armeabi-v7a', 'x86'
            } else {
                abiFilters 'armeabi-v7a'
            }
        }
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }

    packagingOptions {
        doNotStrip '*/mips/*.so'
        doNotStrip '*/mips64/*.so'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL*'
        exclude 'META-INF/ASL*'
        exclude 'META-INF/proguard/*'
        exclude 'META-INF/*.version'
        exclude 'LICENSE*'
        exclude 'junit/*/*'
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "androidx.core:core:$androidxVersion"
    implementation "androidx.lifecycle:lifecycle-common:$lifecycleVersion"
}
